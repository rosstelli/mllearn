setwd('/Users/ross/Documents/udemy/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 9 - Random Forest Regression/')
dataset <- read.csv('Position_Salaries.csv')
dataset <- dataset[2:3]
str(dataset)
setwd('/Users/ross/Documents/udemy/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 9 - Random Forest Regression/')
dataset <- read.csv('Position_Salaries.csv')
dataset <- dataset[2:3]
set.seed(123)
library(randomForest)
install.packages('randomForest')
install.packages("randomForest")
set.seed(123)
library(randomForest)
regressor <- randomForest(x = dataset$Level, y = dataset$Salary,
ntree=10)
regressor <- randomForest(x = dataset[1], y = dataset$Salary,
ntree=10)
y_pred = predict(regressor, data.frame(Level = 6.5))
library(ggplot2)
x_grid <- seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y=dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid,
y = predict(regressor,
newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Decision Tree results') +
xlab('Level') +
ylab('Salary')
y_pred
setwd('/Users/ross/Documents/udemy/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 14 - Logistic Regression/')
dataset <- read.csv('Social_Network_Ads.csv')
source('~/Documents/udemy/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 14 - Logistic Regression/logR.R')
test_set
source('~/Documents/udemy/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 14 - Logistic Regression/logR.R')
classifier
cm <- table(test_set[ , 3], y_pred)
source('~/Documents/udemy/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 14 - Logistic Regression/logR.R')
cm
install.packages('ElemStatLearn')
source('~/Documents/udemy/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 14 - Logistic Regression/logR.R')
source('~/Documents/udemy/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 14 - Logistic Regression/logR.R')
source('~/Documents/udemy/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 14 - Logistic Regression/logR.R')
set <- training_set
setwd('/Users/ross/Documents/udemy/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 14 - Logistic Regression/')
dataset <- read.csv('Social_Network_Ads.csv')
dataset <- dataset[, 3:5]
set.seed(123)
library(caTools)
split <- sample.split(dataset$Purchased, SplitRatio =0.75)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
training_set[, 1:2] <- scale(training_set[, 1:2])
test_set[, 1:2] <- scale(test_set[, 1:2])
classifier <- glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
prob_pred <- predict(classifier, type = 'response', newdata = test_set[-3])
y_pred <- ifelse(prob_pred > 0.5, 1, 0)
cm <- table(test_set[ , 3], y_pred)
set <- training_set
library(ElemStatLearn)
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set <- predict(classifier, type='response', newdata = grid_set)
y_grid = ifelse(prob_pred > 0.5, 1, 0)
plot(set[, -3], main = 'Classifier (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
length(X1)
as.numeric(y_grid)
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 0.98, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 0.98, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set <- predict(classifier, type='response', newdata = grid_set)
y_grid = ifelse(prob_pred > 0.5, 1, 0)
plot(set[, -3], main = 'Classifier (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
set <- training_set
library(ElemStatLearn)
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set <- predict(classifier, type='response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3], main = 'Classifier (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
set <- test_set
library(ElemStatLearn)
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set <- predict(classifier, type='response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3], main = 'Classifier (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
?glm
?lm
library(class)
setwd('/Users/ross/Documents/udemy/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 15 - K-Nearest Neighbors (K-NN)/')
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
library(class)
y_pred <- knn(train = training_set[, -3], test = test_set[ , -3],
cl = training_set[,3], k = 5)
y_pred
cm = table(test_set[, 3], y_pred)
cm
setwd('/Users/ross/Documents/udemy/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 15 - K-Nearest Neighbors (K-NN)/')
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
library(class)
y_pred <- knn(train = training_set[, -3], test = test_set[ , -3],
cl = training_set[,3], k = 5)
y_pred = predict(classifier, newdata = test_set[-3])
cm = table(test_set[, 3], y_pred)
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid <- knn(train = training_set[, -3], test = grid_set,
cl = training_set[,3], k = 5)
plot(set[, -3],
main = 'Classifier (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
library(e1071)
setwd('/Users/ross/Documents/udemy/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 16 - Support Vector Machine (SVM)/')
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
?svm
setwd('/Users/ross/Documents/udemy/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 16 - Support Vector Machine (SVM)/')
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
library(e1071)
classifier <- svm(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
y_pred = predict(classifier, newdata = test_set[-3])
cm = table(test_set[, 3], y_pred)
cm
cm
source('~/Documents/udemy/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 16 - Support Vector Machine (SVM)/svm.R')
setwd('/Users/ross/Documents/udemy/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 17 - Kernel SVM/')
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
library(e1071)
classifier <- svm(formula = Purchased ~ .,
data = training_set,
type = "C-classification",
kernel = "radial")
y_pred = predict(classifier, newdata = test_set[-3])
y_pred
source('~/Documents/udemy/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 17 - Kernel SVM/k_svm.R')
setwd('/Users/ross/Documents/udemy/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 18 - Naive Bayes/')
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
library(e1071)
classifier <- naiveBayes(x = training_set[, -3],
y = training_set$Purchased)
y_pred = predict(classifier, newdata = test_set[-3])
cm = table(test_set[, 3], y_pred)
cm
setwd('/Users/ross/Documents/udemy/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 18 - Naive Bayes/')
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
library(e1071)
classifier <- naiveBayes(x = training_set[, -3],
y = training_set$Purchased)
y_pred = predict(classifier, newdata = test_set[-3])
cm = table(test_set[, 3], y_pred)
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Classifier (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
setwd('/Users/ross/Documents/udemy/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 19 - Decision Tree Classification/')
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
?rpart
library(rpart)
classifier <- rpart(formula = Purchased ~ .,
data= training_set)
y_pred = predict(classifier, newdata = test_set[-3])
y_pred
y_pred = predict(classifier, newdata = test_set[-3], type = 'class')
y_pred
cm
setwd('/Users/ross/Documents/udemy/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 19 - Decision Tree Classification/')
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
library(rpart)
classifier <- rpart(formula = Purchased ~ .,
data= training_set)
y_pred = predict(classifier, newdata = test_set[-3], type = 'class')
y_pred
cm = table(test_set[, 3], y_pred)
cm
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Classifier (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set, type = 'class')
plot(set[, -3],
main = 'Decision Tree Classifier (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set, type = 'class')
plot(set[, -3], main = 'Classifier (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
setwd('/Users/ross/Documents/udemy/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 20 - Random Forest Classification/')
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
y_pred = predict(classifier, newdata = test_set[-3])
library(randomForest)
classifier <- randomForest(x = training_set[-3],
y = training_set$Purchased,
ntree = 10)
y_pred = predict(classifier, newdata = test_set[-3])
cm = table(test_set[, 3], y_pred)
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Classifier (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Random Forest (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3], main = 'Random Forest (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
cm
setwd('/Users/ross/Documents/udemy/Machine Learning A-Z Template Folder/Part 4 - Clustering/Section 24 - K-Means Clustering/')
dataset <- read.csv("Mall_Customers.csv")
x <- dataset[4:5]
x
source('~/Documents/udemy/Machine Learning A-Z Template Folder/Part 4 - Clustering/Section 24 - K-Means Clustering/kmeans.R')
source('~/Documents/udemy/Machine Learning A-Z Template Folder/Part 4 - Clustering/Section 24 - K-Means Clustering/kmeans.R')
setwd('/Users/ross/Documents/udemy/Machine Learning A-Z Template Folder/Part 4 - Clustering/Section 25 - Hierarchical Clustering/')
dataset <- read.csv("Mall_Customers.csv")
dataset <- read.csv("Mall_Customers.csv")
x <- dataset[4:5]
source('~/Documents/udemy/Machine Learning A-Z Template Folder/Part 4 - Clustering/Section 25 - Hierarchical Clustering/hier.R')
source('~/Documents/udemy/Machine Learning A-Z Template Folder/Part 4 - Clustering/Section 25 - Hierarchical Clustering/hier.R')
source('~/Documents/udemy/Machine Learning A-Z Template Folder/Part 4 - Clustering/Section 25 - Hierarchical Clustering/hier.R')
source('~/Documents/udemy/Machine Learning A-Z Template Folder/Part 4 - Clustering/Section 25 - Hierarchical Clustering/hier.R')
y_hc
source('~/Documents/udemy/Machine Learning A-Z Template Folder/Part 4 - Clustering/Section 25 - Hierarchical Clustering/hier.R')
install.packages('arules')
library(arules)
dataset <- read.transactions('Market_Basket_Optimisation_r.csv', sep = ",")
setwd('/Users/ross/Documents/udemy/Machine Learning A-Z Template Folder/Part 5 - Association Rule Learning/Section 28 - Apriori/')
dataset <- read.transactions('Market_Basket_Optimisation_r.csv', sep = ",")
dataset <- read.transactions('Market_Basket_Optimisation_r.csv', sep = ",", rm.duplicates =TRUE)
summary(dataset)
itemFrequencyPlot(dataset, topN = 100)
itemFrequencyPlot(dataset, topN = 30)
3 * 7 / 7500
source('~/Documents/udemy/Machine Learning A-Z Template Folder/Part 5 - Association Rule Learning/Section 28 - Apriori/p.R')
rules = apriori(data = dataset, parameter = list(support = 0.003, confidence = 0.4))
inspect(sort(rules, by = 'lift')[1:10])
rules = apriori(data = dataset, parameter = list(support = 0.003, confidence = 0.2))
inspect(sort(rules, by = 'lift')[1:10])
setwd('/Users/ross/Documents/udemy/Machine Learning A-Z Template Folder/Part 5 - Association Rule Learning/Section 29 - Eclat/')
library(arules)
dataset <- read.transactions('Market_Basket_Optimisation_r.csv', sep = ",", rm.duplicates =TRUE)
dataset <- read.transactions('Market_Basket_Optimisation.csv', sep = ",", rm.duplicates =TRUE)
summary(dataset)
itemFrequencyPlot(dataset, topN = 10)
rules = eclat(data = dataset, parameter = list(support = 0.004, minlen = 2))
inspect(sort(rules, by = 'lift')[1:10])
inspect(sort(rules, by = 'support')[1:10])
setwd('/Users/ross/Documents/udemy/Machine Learning A-Z Template Folder/Part 6 - Reinforcement Learning/Section 32 - Upper Confidence Bound (UCB)/')
dataset <- read.csv('Ads_CTR_Optimisation.csv')
integer(10)
source('~/Documents/udemy/Machine Learning A-Z Template Folder/Part 6 - Reinforcement Learning/Section 32 - Upper Confidence Bound (UCB)/ucb.R')
source('~/Documents/udemy/Machine Learning A-Z Template Folder/Part 6 - Reinforcement Learning/Section 32 - Upper Confidence Bound (UCB)/ucb.R')
total_reward
sums_of_rewards
hist(ads_selected, col = 'blue', main = 'Histogram of ads', xlab = 'ads', ylab = 'selected')
?beta
setwd('/Users/ross/Documents/udemy/Machine Learning A-Z Template Folder/Part 6 - Reinforcement Learning/Section 33 - Thompson Sampling/')
dataset <- read.csv('Ads_CTR_Optimisation.csv')
N <- 10000;
d <- 10; # Number of 'ads'
ads_selected <- integer()
numbers_of_rewards_1 <- integer(d)
numbers_of_rewards_0 <- integer(d)
source('~/Documents/udemy/Machine Learning A-Z Template Folder/Part 6 - Reinforcement Learning/Section 33 - Thompson Sampling/ts.R')
source('~/Documents/udemy/Machine Learning A-Z Template Folder/Part 6 - Reinforcement Learning/Section 33 - Thompson Sampling/ts.R')
setwd('/Users/ross/Documents/udemy/Machine Learning A-Z Template Folder/Part 7 - Natural Language Processing/Section 36 - Natural Language Processing/')
?read.csv
dataset <- read.csv('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
dataset
dataset <- read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
dataset
dataset[1, ]
install.packages('tm')
library(tm)
corpus <- VCorpis(VectorSource(dataset$Review))
corpus <- VCorpus(VectorSource(dataset$Review))
tolower
corpus
corpus <- tm_map(corpus, content_transformer(tolower))
corpus
as.character(corpus[[1]])
stopwords
library(SnowballC)
install.packages('SnowballC')
stopwords()
source('~/Documents/udemy/Machine Learning A-Z Template Folder/Part 7 - Natural Language Processing/Section 36 - Natural Language Processing/nlp.R')
dta
source('~/Documents/udemy/Machine Learning A-Z Template Folder/Part 7 - Natural Language Processing/Section 36 - Natural Language Processing/nlp.R')
source('~/Documents/udemy/Machine Learning A-Z Template Folder/Part 7 - Natural Language Processing/Section 36 - Natural Language Processing/nlp.R')
dtm
dataset_original <- read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
source('~/Documents/udemy/Machine Learning A-Z Template Folder/Part 7 - Natural Language Processing/Section 36 - Natural Language Processing/nlp.R')
source('~/Documents/udemy/Machine Learning A-Z Template Folder/Part 7 - Natural Language Processing/Section 36 - Natural Language Processing/nlp.R')
setwd('/Users/ross/Documents/udemy/Machine Learning A-Z Template Folder/Part 7 - Natural Language Processing/Section 36 - Natural Language Processing/')
dataset_original <- read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
library(tm)
library(SnowballC)
corpus <- VCorpus(VectorSource(dataset_original$Review))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords())
corpus <- tm_map(corpus, stemDocument)
corpus <- tm_map(corpus, stripWhitespace)
dtm <- DocumentTermMatrix(corpus)
dtm <- removeSparseTerms(dtm, 0.999)
dataset <- as.data.frame(as.matrix(dtm))
dataset$Liked <- dataset_original$Liked
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
dataset$Liked
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
library(randomForest)
classifier <- randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
y_pred = predict(classifier, newdata = test_set[-692])
cm = table(test_set[, 3], y_pred)
cm
cm = table(test_set[, 692], y_pred)
cm
82+77
159/200
